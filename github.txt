Apuntes git

superlog configurado en platzi

git config --global alias.superlog "log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

comando touch ejemplo--> touch 1.txt crea archivo en carpeta especifica de $.

crea una rama llamada experimental
git checkout -b experimental

checkout ---> comando que brinca de head a head en git.

para poder escribir en consola es la letra "o"
después esc y para cerrar es ":x"

Para borrar una rama
git branch -d "nombre de rama "
ejemplo
git branch -d experimental

FUSIONAR DOS RAMAS
posicionado en la rama master escribir comando

git merge "nombre de rama a fusionar"

AGREGAR CAMBIO A UN COMMIT EN EL TEXTO del ultimo commit
git commit -am "texto" --amend

COMANDO PARA REMOVER TODOS LOS ARCHIVOS Y SUB CARPETAS
rm -rf ".git"---> nombre de carpeta o archivo sin comillas

COMANDO PARA INICIALIZAR GIT
git init

PARA CLONAR TE POSICIONAS EN LA CARPETA DONDE DESEAR CLONAR Y COMANDO:

git clone "direccion https "

COMANDOS LOG

git shortlog --->manda el nombre de creador y comentario

CREAR REPOSITORIO GITHUB
Crear llave ssh "poner aquí correo electrónico"


Buscar la llave pública que se guardo en la dirección por defecto para ponerla en github, puedes verificar los directorios con:
		ls -la


y verificar que existe la carpeta .ssh, entramos a .ssh y verificando sus archivos examinamos el archivo (llave pública) id_rsa.pub para extraer la llave pública y dársela a github con el comando:

		cat id_rsa.pub
lo que sale (el número-te enorme) es la llave pública que colocaremos en github (Settings - SSH) para que github identifique que tenemos de alguna forma la llave privada (Guardada en el local).

SUBIR A GITHUB

ESTANDO EN EL DIRECTORIO / CARPETA DONDE ESTÁN NUESTROS ARCHIVOS A SUBIR:

git remote add origin dirección-del-repositorio


SEGUIDAMENTE (PARA SUBIR A GITHUB) DE:

git push -u origin master


DOCUMENTACION DE GIT PARA PROBLEMA DE ORIGEN

http://es.stackoverflow.com/questions/245/cu%C3%A1l-es-la-diferencia-entre-pull-y-fetch-en-git

COMANDO CUANDO LOS SERVIDORES NO TIENEN INSTALADO GIT
yum install git

DESPLIEGUE A SERVIDOR
1.-TENER ACCESO A SERVIDOR POR MEDIO DE GIT Y SERVER POR SSH
2.-TENER ACCESO A EL AREA DE APPS DEL SERVER
3.-HACER UN PULL A ORIGN MASTER

este es el final

Publicar contenido en web
1.- git checkout -b gh-pages
2.-git push -u origin gh-pages
borrar la publicacion.
1.-git push origin --delete gh-pages

Si normalmente desarrollamos en la rama master y queremos que los cambios que hemos hecho se publiquen en la web que genera Github con gh-pages, debemos seguir el siguiente workflow:

Trabajamos con normalidad en la rama master y en algún momento decidimos subir cambios a Github:



git push origin master


A continuación, cambiamos a la rama gh-pages:



git checkout gh-pages


Mezclamos los cambios de la rama master sobre la rama gh-pages que obviamente estará desactualizada:



git merge master


Subimos los cambios a la rama gh-pahes en Github



git push origin gh-pages


Lo que acabamos de hacer es subir los cambios de la rama de desarrollo a la aplicación web en Github. A continuación, si queremos seguir desarrollando, volvemos a la rama master:



git checkout master


Y este workflow lo podemos repetir hasta el infinito
